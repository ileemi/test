
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <openssl/aes.h>

int decrypto(const char* ciphertext, int n_len ,const unsigned char* key, unsigned char* iv, unsigned char** outText)
{
    AES_KEY aes;
    AES_set_decrypt_key(key, 128, &aes);

    int datalen = n_len;

    unsigned char* decrypt = (unsigned char*)calloc(datalen, 1);
    AES_cbc_encrypt((unsigned char*)ciphertext, decrypt, datalen, &aes, iv, AES_DECRYPT);

    *outText = decrypt;
  
    return datalen;

}

int encryptoText(const char* plainText, int n_len, const unsigned char* key, unsigned char* iv, unsigned char** outText)
{
    AES_KEY aes;
    AES_set_encrypt_key(key, 128, &aes);
    int datalen = 0;
    if (n_len % 16 == 0)
    {
        datalen = n_len;
    }
    else
    {
        datalen = (n_len / 16 + 1) * 16;
    }
    unsigned char* cipherText = (unsigned char*)calloc(datalen, 1);

    AES_cbc_encrypt((unsigned char*)plainText, cipherText, datalen, &aes, iv, AES_ENCRYPT);
    *outText = cipherText;

    return datalen;
}


int main()
{
    //初始化向量，长度和密钥一致
    unsigned char g_iv1[] = {
        0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70
    };

    unsigned char g_iv2[] = {
        0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70
    };


    unsigned char key_buff[] = {
        0xcc, 0x8c, 0xd4, 0x1c, 0xef, 0x90, 0x7c, 0x4d,
        0x21, 0x60, 0x69, 0x12, 0x2c, 0x4b, 0x89, 0x93
    };

    
    unsigned char source_data[48] = {
        0x62, 0x1B, 0x9B, 0xDF, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x1F,
        0x00, 0x00, 0x00, 0x09, 0x25, 0x43, 0x4F, 0x4D, 0x53, 0x50, 0x45, 0x43, 0x25, 0x00, 0x00, 0x00,
        0x0C, 0x20, 0x2F, 0x43, 0x20, 0x69, 0x70, 0x63, 0x6F, 0x6E, 0x66, 0x69, 0x67, 0x00, 0x00, 0x41
    };

    
    unsigned char encrypt_buff[] = {
        0x53, 0xbf, 0xe8, 0x4b, 0xe5, 0x89, 0x1a, 0x37, 
        0x00, 0x36, 0x87, 0x7e, 0x4c, 0xe6, 0xdc, 0x91,
        0x1a, 0xac, 0x47, 0x83, 0x0e, 0x95, 0x53, 0xca, 
        0xeb, 0xfb, 0xb7, 0x10, 0x98, 0x34, 0x08, 0xfd,
        0x4f, 0xb4, 0x32, 0xa9, 0xf4, 0x45, 0x04, 0xc0, 
        0x32, 0xb8, 0x39, 0x19, 0xca, 0xd6, 0xab, 0xdc
    };

    int n_len = sizeof(source_data);
    unsigned char* cipher = NULL;

    //加密
    n_len = encryptoText((char*)source_data, n_len, key_buff, g_iv1, &cipher);

    //解密
    unsigned char* text = NULL;
    //memset(iv, 'a', sizeof(iv));
    int n = decrypto((char*)cipher, n_len, key_buff, g_iv2, &text);

    free(cipher);
    free(text);

    return 0;
}